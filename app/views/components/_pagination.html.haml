- if properties[:total] > 1

  - href = properties[:path]

  - if properties[:param]
    - href = href.sub(/(#{properties[:param]})\=([0-9]+)(&amp;|&)?/, '') # Remove any existing pagination param
    - href = href.sub(/(&amp;|&)?$/, '') # Remove any trailing ampersands
    - href+= "#{/\?/.match(href) ? '&' : '?'}#{properties[:param]}=%i" # Append new param

  .pagination{ class: properties[:classes] }

    - if properties[:current] < properties[:total]
      .pagination__forwards.split--right
        %a.pagination__link.pagination__link--last{ href: href.gsub(/%i/, properties[:total].to_s) }<
          Last
        %a.pagination__link.pagination__link--next{ href: href.gsub(/%i/, (properties[:current] + 1).to_s)}<
          &gt;

    - if properties[:current] > 1
      .pagination__backwards.split--left
        %a.pagination__link.pagination__link--prev{ href: href.gsub(/%i/, (properties[:current] - 1).to_s) }<
          &lt;
        %a.pagination__link.pagination__link--first{ href: href.gsub(/%i/, "1") }<
          First

    .pagination__numbers
      - start = 1
      - finish = properties[:total]
      - num_visible = properties[:num_visible] || 5
      - offset = (num_visible / 2.0).ceil # Force a floating point number

      - if properties[:total] > num_visible
        - if properties[:current] >= (properties[:total] - offset) # [x] [x] [x] [x] [√] [√] [c] [√] [√]
          - start = properties[:total] - num_visible + 1
        - elsif properties[:current] < offset # [√] [√] [c] [√] [√] [x] [x] [x] [x]
          - finish = num_visible
        - else # [x] [√] [√] [c] [√] [√] [x] [x] [x]
          - start = properties[:current] - offset + 1
          - finish = properties[:current] + offset - 1

      - for num in start..finish
        - if properties[:current] != num
          %a.pagination__link{ href: href.gsub(/%i/, num.to_s), data: { current: properties[:current], num: num} }<
            = num
        - else
          .pagination__link.pagination__link--current<
            = num