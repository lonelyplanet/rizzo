
:javascript
  function sortBy(comparator) {
      var sections = document.querySelectorAll('.styleguide-block');

      for (var i=0; i < sections.length; i++) {
          var section = sections[i],    
              cards = Array.prototype.slice.call(section.querySelectorAll('.card--double')),
              newCards = '';
          
          cards = cards.sort(comparator);
          
          cards.forEach(function(card) {
              newCards += card.outerHTML;
          });
          
          section.querySelector('.js-card-container').innerHTML = newCards;
      }
  }

  function lightToDark(a, b) {
      var lumA = Number(a.getAttribute('data-luminance')),
          lumB = Number(b.getAttribute('data-luminance'));
      
      return lumA < lumB;
  }
  function darkToLight(a, b) {
      var lumA = Number(a.getAttribute('data-luminance')),
          lumB = Number(b.getAttribute('data-luminance'));
      
      return lumA > lumB;
  }

  function resetProximity() {
    document.getElementById('proximityMatch').value = "";
    document.querySelectorAll('.card--double').forEach(function(card) {
      card.removeAttribute('style');
      card.className = card.className.replace(' isnt-approximate', '').replace(' is-approximate', '');
    });
  }
  
  function matchProximity() {
    var colour = document.getElementById('proximityMatch').value,
        colourBlocks = document.querySelectorAll('.styleguide-block__item--colour');

    colourBlocks.forEach(function(colourBlock) {
      var proximity = colourProximity(colour, colourBlock.innerHTML);
      
      // Remove previous classes
      colourBlock.parentNode.removeAttribute('style');
      colourBlock.parentNode.className = colourBlock.parentNode.className.replace(' is-approximate', '').replace(' isnt-approximate', '');


      if (proximity < 20) {
        colourBlock.parentNode.style["background-color"] = /^#/.test(colour) ? colour : "#"+colour;
        colourBlock.parentNode.className+= ' is-approximate';

        if (proximity === 0) {
          colourBlock.parentNode.className+= ' is-exact';
        }
      } else {
        colourBlock.parentNode.className+= ' isnt-approximate';
      }
    });
  }

  /* Mostly ripped from here: http://stackoverflow.com/questions/13586999/color-difference-similarity-between-two-values-with-js */
  function colourProximity(v1, v2) {
    var i,
        d = 0;

    v1 = hexToRGB(v1);
    v2 = hexToRGB(v2);

    for (i = 0; i < v1.length; i++) {
        d += (v1[i] - v2[i])*(v1[i] - v2[i]);
    }
    return Math.sqrt(d);
  }

  function hexToRGB(colour) {
    colour = colour.replace(/^#/, '').match(/[0-9a-z]{2}/gi);

    return [parseInt(colour[0], 16), parseInt(colour[1], 16), parseInt(colour[2], 16)];
  }